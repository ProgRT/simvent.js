function ventyamlEverything(e){var t=document.querySelectorAll(e);for(var i in t)if("undefined"!=typeof t[i].tagName){new ventyaml(t[i])}}class ventyaml{constructor(e){this.clsList=e.classList;for(var t in e.classList.keys()){console.log(t)}if(!YAML){throw"ventyaml: YAML library not loaded."}this.parentDiv=e.parentNode;this.container=document.createElement("figure");this.container.className=this.clsList;this.container.classList.add("ventyaml");this.parentDiv.insertBefore(this.container,e);if(e.tagName=="TEXTAREA"){this.textarea=e}else{this.textarea=document.createElement("textarea");this.textarea.value=e.textContent;this.parentDiv.removeChild(e)}this.container.appendChild(this.textarea);this.textarea.classList.add("ventyamlSource");this.container.classList.add("hidden");this.textarea.value=this.textarea.value.trim();this.waveformContainer=document.createElement("div");this.waveformContainer.classList.add("vyamlwc");var i="vyamlwc"+(document.getElementsByClassName("vyamlwc").length+1);this.waveformContainer.id=i;this.container.insertBefore(this.waveformContainer,this.textarea);this.waveformContainer.addEventListener("click",this.toggleSource.bind(this));this.downloadsDiv=document.createElement("div");this.downloadsDiv.classList.add("downloads");this.container.appendChild(this.downloadsDiv);this.update()}setValue(e){this.textarea.value=e;if("cm"in this){console.log("We have a codemirror instance");this.cm.setValue(e)}}createCM(){if(typeof window.CodeMirror!=="undefined"){this.cm=CodeMirror.fromTextArea(this.textarea,{theme:"midnight",mode:"yaml",matchBrackets:true,showCursorWhenSelecting:true})}else{console.log("Codemirror not available")}}update(){this.yaml=this.textarea.value;this.json=YAML.parse(this.yaml);this.updateLung();this.updateVent();this.run();this.updateGraph()}updateVent(){this.vents=[];if(!("Ventilateur"in this.json)&&!("Ventilateurs"in this.json)){this.vents.push(new sv.PressureControler)}else if("Ventilateur"in this.json){this.vents.push(this.createvent(this.json.Ventilateur))}else if(typeof this.json.Ventilateurs=="object"){for(var e in this.json.Ventilateurs){this.vents.push(this.createvent(this.json.Ventilateurs[e]))}}}updateLung(){this.lungs=[];if("Poumon"in this.json){this.lungs.push(this.createlung(this.json.Poumon))}else if("Poumons"in this.json){for(var e in this.json.Poumons){this.lungs.push(this.createlung(this.json.Poumons[e]))}}else{this.lungs.push(this.createlung("SimpleLung"))}}createvent(e){if(typeof e=="string"){if(e in sv){var t=new sv[e]}}else if(typeof e=="object"){if(!("Mode"in e)){var t=new sv.PressureControler}else if(e.Mode in sv){var t=new sv[e.Mode]}else{console.log("Does not seems to be a valid vent type")}for(var i in e){if(i!=="Mode"&&typeof e[i]=="number"){t[i]=e[i]}}}if(typeof t!="undefined"){return t}}createlung(e){if(typeof e=="string"){if(e in sv){var t=new sv[e]}}else if(typeof e=="object"){if(!("Type"in e)){var t=new sv.SimpleLung}else if(e.Type in sv){var t=new sv[e.Type]}else{console.log("Does not seems to be a valid lung type")}for(var i in e){if(i!=="Type"&&typeof e[i]=="number"){t[i]=e[i]}}}if(typeof t!="undefined"){return t}}run(){this.data=[];var e=this.downloadsDiv.children;for(var t=0;t<e.length;t++){this.downloadsDiv.removeChild(e[t])}for(var t in this.vents){var i=this.vents[t];for(var t in this.lungs){i.time=0;var s=i.ventilate(this.lungs[t]).timeData;this.data.push(s);var n=typeof s!="object"?JSON.parse(s):s;var a="";var o="";for(var r in n[0]){if(o!="")o+="	 ";o+=r}a+=o+"\r\n";for(var t=0;t<n.length;t++){var o="";for(var r in n[t]){if(o!="")o+="	 ";o+=n[t][r]}a+=o+"\r\n"}var h=document.createElement("a");h.download="simvent"+this.data.length+".dat";h.href="data:text/tsv;charset=utf-8,"+escape(a);h.textContent=h.download+" ";this.downloadsDiv.appendChild(h)}}}updateGraph(){var e=this.waveformContainer;while(e.firstChild){e.removeChild(e.firstChild)}if("Courbes"in this.json){var t=this.json.Courbes;if(typeof t=="object"){for(var i in t){this.createWaveform(t[i])}}else{console.log("ventyaml: Value for courbes must be a string list")}}else if("Courbe"in this.json){this.createWaveform(this.json.Courbe)}if("Boucles"in this.json){for(var i in this.json.Boucles){this.createLoop(this.json.Boucles[i])}}else if("Boucle"in this.json){var s=this.json.Boucle;this.createLoop(s)}if(!("Courbes"in this.json)&&!("Courbe"in this.json)&&!("Boucle"in this.json)&&!("Boucles"in this.json)){this.createWaveform("Flung")}}createWaveform(e){if(typeof e=="string"){function t(e){return e.time}function i(t){return t[e]}var s=gs.addGraph(this.waveformContainer.id,this.data[0],t,i).setidx("Temps (s)").setidy(e);if(this.data.length>1){for(var n=1;n<this.data.length;n++){s.tracer(this.data[n],t,i)}}}else{console.log("ventyaml: Value for courbes must be a string")}}createLoop(e){if(typeof e=="object"&&"x"in e&&"y"in e&&e.x!=null&&e.y!=null){function t(t){return t[e["x"]]}function i(t){return t[e["y"]]}var s=gs.addGraph(this.waveformContainer.id,this.data[0],t,i,{"class":"loop"});s.setidx(e["x"]);s.setidy(e["y"]);if(this.data.length>1){for(var n=1;n<this.data.length;n++){s.tracer(this.data[n],t,i)}}}else{console.log("ventyaml: invalid loop description")}}toggleSource(){if(this.container.classList.contains("hidden")){this.container.classList.remove("hidden")}else{this.update();this.container.classList.add("hidden")}}downloadData(){}}